#!/usr/bin/with-contenv bash

print_vars () {
    if [ -n "${1}" ]; then
	title=" ${1}"
    else
	title=""
    fi
    echo "Environment${title}:"
    echo "    PUID=${PUID}"
    echo "    PGID=${PGID}"
    echo "    TZ=${TZ}"
    for var in "${!MMONIT_@}"; do
	printf '    %s=%s\n' "$var" "${!var}"
    done    
}

print_vars init-mmonit

# load env file if it exists
if [ -f "/config/env" ]; then
  source /config/env
  print_vars "After sourcing /config/env"
fi

# Copy our dist to /config
test -d /config/mmonit-${MMONIT_VERSION} || rsync -avq /opt/mmonit-${MMONIT_VERSION} /config/

# Link log files
(
    cd /config &&
	rm -rf logs &&
	ln -s mmonit-${MMONIT_VERSION}/logs .
)

# Fix syntax errors in server.xml
xmlstarlet validate /config/mmonit-${MMONIT_VERSION}/conf/server.xml > /dev/null
if [ $? -ne 0 ]; then
    echo "Escaping & in XML"
    sed -i -E -e 's/&[^#]/\&#38;/g' /config/mmonit-${MMONIT_VERSION}/conf/server.xml
    xml_fixup=yes
else
    xml_fixup=no
fi

# Update license owner
if [ -n "${MMONIT_LICENSE_OWNER}" ]; then
    echo Setting M/Monit license owner
    xmlstarlet edit --inplace -u "/License/@owner" -v "${MMONIT_LICENSE_OWNER}" /config/mmonit-${MMONIT_VERSION}/conf/license.xml
fi

# Update License value
if [ -n "${MMONIT_LICENSE_KEY}" ]; then
    echo Setting M/Monit license key
    xmlstarlet edit --inplace -u "/License" -v "${MMONIT_LICENSE_KEY}" /config/mmonit-${MMONIT_VERSION}/conf/license.xml
fi

# Update DM connector
if [ -n "${MMONIT_DATABASE_URL}" ]; then
    echo Setting database URL
    xmlstarlet edit --inplace -u "/Server/Service/Engine/Realm/@url" -v "${MMONIT_DATABASE_URL}" /config/mmonit-${MMONIT_VERSION}/conf/server.xml
fi

if [ -n "${MMONIT_TLS_VERSION}" ]; then
    echo Setting TLS version
    xmlstarlet edit --inplace \
	       -u "/Server/Service/Engine/Host/@tls" -v "${MMONIT_TLS_VERSION}" \
	       -i "/Server/Service/Engine/Host[not(@tls)]" --type attr -n tls -v "${MMONIT_TLS_VERSION}" /config/mmonit-${MMONIT_VERSION}/conf/server.xml
else
    echo Unsetting TLS version
    xmlstarlet edit --inplace -d "/Server/Service/Engine/Host/@tls" /config/mmonit-${MMONIT_VERSION}/conf/server.xml
fi

# Set nprocessors based on CPU count https://mmonit.com/wiki/MMonit/FAQ#scaling
nprocessors=$(nproc --all)
test ${nprocessors} -lt 10 && nprocessors=10
xmlstarlet edit --inplace -u "/Server/Service/Connector/@processors" -v ${nprocessors} /config/mmonit-${MMONIT_VERSION}/conf/server.xml

# Restore the fixups
if [ "${xml_fixup}" = "yes" ]; then
    echo "Restoring escaped & in XML"
    sed -i -E -e 's/&#38;/\&/g' /config/mmonit-${MMONIT_VERSION}/conf/server.xml
fi

# XMLstarlet likes to use &amp; put it back
sed -i -E -e 's/&amp;/\&#38;/g' /config/mmonit-${MMONIT_VERSION}/conf/server.xml

# XXX - Cron, logrotate

# permissions
chown -R abc:abc \
	/config \
	/opt/mmonit-${MMONIT_VERSION}

# Set /etc/localtime
if [ -n "${TZ}" ]; then
    echo "Setting up /etc/localtime from ${TZ}"
    ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime
fi

if [ -d /backup ]; then
    echo "Configuring backups"

    database=$(expr "${MMONIT_DATABASE_URL}" : '\(.*\)://.*$')
    if [ -n "${database}" ]; then
	case "${database}" in
	    "mysql")
		apk add -Uq mariadb-client 2>&1
		database="$(trurl --url "${MMONIT_DATABASE_URL}" --get '{scheme}')"
		database_user="$(trurl --url "${MMONIT_DATABASE_URL}" --get '{user}')"
		database_password="$(trurl --url "${MMONIT_DATABASE_URL}" --get '{password}')"
		database_host="$(trurl --url "${MMONIT_DATABASE_URL}" --get '{host}')"
		database_port="$(trurl --url "${MMONIT_DATABASE_URL}" --get '{port}')"
		database_socket="$(trurl --url "${MMONIT_DATABASE_URL}" --get '{query:unix-socket}')"
		cat > /etc/mysqldump.cnf <<EndOfDocument
    [client]
    host = ${database_host}
    port = ${database_port:-3306}
    user = ${database_user}
    password = ${database_password}
    socket = ${database_socket}
EndOfDocument
		;;
	    *)
		echo "Backups of ${database} not yet supported"
		;;
	esac
    else
	apk add -Uq sqlite 2>&1
    fi
fi

echo "init-mmonit done"
